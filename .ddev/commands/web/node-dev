#!/usr/bin/env bash

## Description: Run Vite HMR dev servers for all targets sequentially
## to avoid port conflicts, then let them run concurrently.

# Assuming these variables are set in your environment or the sourced file:
# buildTargets: An array of paths to your Vite projects.
# E.g., buildTargets=("./packages/app-one" "./packages/app-two")

export scriptRoot=$(dirname "$(realpath "${BASH_SOURCE[0]}")")
if [ -f "$scriptRoot/.utilities" ]; then
    source "$scriptRoot/.utilities"
fi

# Function to gracefully shut down all background processes on exit
cleanup() {
    echo -e "\n\nShutting down all dev servers..."
    # 'pkill -P $$' sends a TERM signal to all direct child processes of this script.
    pkill -P $$
    echo "Done."
    # We explicitly exit with status 0 to indicate a successful, clean shutdown.
    # This prevents the parent process (node-dev) from reporting a failure.
    exit 0
}

# SIGINT is sent on Ctrl+C.
# SIGTERM is a generic termination signal (e.g., from 'kill' commands).
# This is more precise than trapping the general 'EXIT' signal for this use case.
trap cleanup SIGINT SIGTERM
for target in "${buildTargets[@]}"; do
    targetName=$(basename "$target")
    (
        cd "$target"
        if [ ! -d "node_modules" ]; then
            pnpm install
        fi
    ) >/dev/null 2>&1
done
for target in "${buildTargets[@]}"; do
    targetName=$(basename "$target")
    echo "--- Starting dev server for: ${targetName} ---"
    (
        cd "$target"
        # The output of each server will be prefixed with its name
        pnpm run dev | sed "s/^/[${targetName}] /"
    ) &

    # Give Vite a moment to initialize and claim a port.
    # You can adjust this duration if your projects take longer to start.
    sleep 0.5
done

wait