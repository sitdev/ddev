#!/usr/bin/env bash
## Description: Install all front-end dependencies, with optional overrides
## Usage:       toggle-build-tools [flags]
## Flags:       [{"Name":"on","Usage":"force enable dev mode"},{"Name":"off","Usage":"force disable dev mode"}]
## ExecRaw:     true

# currentDirectory
# buildTargets
# PLUGIN_DEV_MODE
# SITE_NAME
# SITE_TITLE
# NODE_VER

export scriptRoot=$(dirname "$(realpath "${BASH_SOURCE[0]}")")
source "$scriptRoot/.utilities"

command_exists() {
  command -v "$1" >/dev/null 2>&1
}

FLAG_OVERRIDE=""
sitchcoPackagesDir="wp-content/sitchco-packages"

while [[ $# -gt 0 ]]; do
  case "$1" in --on|--off) FLAG_OVERRIDE="${1#--}";; esac
  shift
done

local_mode=${FLAG_OVERRIDE:-$( [ -d "$sitchcoPackagesDir" ] && echo off || echo on )}

# Check for required commands
for cmd in git pnpm jq; do
  if ! command_exists "$cmd"; then
    echo "Error: '$cmd' is not installed. Please install it to continue." >&2
    exit 1
  fi
done

find_packages() {
  local base="${1:-.}"

  # sanity check
  if [[ ! -d $base ]]; then
    echo "Error: '$base' is not a directory." >&2
    return 1
  fi

  find "$base" \
    -type f -name 'package.json' \
    ! -path "$base/package.json" `# skip the root package.json` \
    ! -path '*/node_modules/*'          `# skip any node_modules` \
    -print0                            |
  while IFS= read -r -d '' pkg; do
    realpath $(dirname "$pkg")
  done
}

if [ "$local_mode" = "on" ]; then
    echo "Installing @sitchco-packages…"
    if [ ! -d "$sitchcoPackagesDir" ]; then
        git clone git@github.com:sitchco/sitchco-packages.git "$sitchcoPackagesDir" >/dev/null 2>&1
    fi
    (cd "$sitchcoPackagesDir" && pnpm install) >/dev/null 2>&1

    # Ensure wp-content/sitchco-packages is ignored by git
    touch .gitignore
    if ! grep -qxF "$sitchcoPackagesDir" .gitignore ; then
      echo "$sitchcoPackagesDir/" >> .gitignore
    fi

    # Convert newline-separated output of find_packages to a bash array
    IFS=$'\n' read -r -d '' -a sitchcoPackages <<< "$(find_packages "$sitchcoPackagesDir")"
    if [ ${#sitchcoPackages[@]} -eq 0 ]; then
        echo "No packages found in $sitchcoPackagesDir. Exiting."
        exit
    fi
    for target in "${buildTargets[@]}"; do
        targetName=$(basename "$target")
        echo "Linking @sitchco dependencies in ${targetName}…"
        (
            cd "$target" || exit 1

            # extract all @sitchco dependency names (strip the prefix)
            mapfile -t wantedPackages < <(
              jq -r '
                ( .dependencies // {} + .devDependencies // {} )
                | keys[]
                | select(startswith("@sitchco/"))
                | sub("^@sitchco/";"")
              ' package.json
            )

            if [ ${#wantedPackages[@]} -eq 0 ]; then
                echo "→ No @sitchco deps found in $targetName; skipping."
                continue
            fi

            # for each wanted package, find its path and link
            for pkgName in "${wantedPackages[@]}"; do
                found=false
                for pkgPath in "${sitchcoPackages[@]}"; do
                    if [[ $(basename "$pkgPath") == "$pkgName" ]]; then
                        pnpm link "$pkgPath" >/dev/null 2>&1
                        found=true
                        break
                    fi
                done
                if ! $found; then
                    echo "⚠️  Warning: @sitchco/$pkgName not found in sitchco-packages."
                fi
            done
        )
    done
else
    if [ -d "$sitchcoPackagesDir" ]; then
        for target in "${buildTargets[@]}"; do
            targetName=$(basename "$target")
            echo "Unlinking dependencies in ${targetName}…"
            (
                cd "$target" || exit 1
                pnpm unlink >/dev/null 2>&1
                if [ -f package.json ]; then
                    # Remove pnpm.overrides if it exists and is empty
                    jq --indent 4 'if has("pnpm") and (.pnpm | has("overrides")) and (.pnpm.overrides | length == 0) then del(.pnpm.overrides) else . end' package.json > package.json.tmp && 
                    mv package.json.tmp package.json
                fi
                git restore pnpm-lock.yaml
                pnpm install >/dev/null 2>&1
            )
        done
        rm -rf "$sitchcoPackagesDir"
    fi
fi
