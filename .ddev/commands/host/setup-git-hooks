#!/usr/bin/env bash

## Description: Install universal git hooks that run pre-commit checks on all platform themes.
## Usage:       setup-git-hooks [flags]
## Flags:       [{"Name":"dry-run","Usage":"Show what would be done without making changes"},{"Name":"verbose","Usage":"Show detailed information about theme detection"}]

set -euo pipefail

# Configuration
THEMES_DIR="wp-content/themes"
HOOKS_DIR=".git/hooks"
VERBOSE=false
DRY_RUN=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        *)
            echo "Unknown option: $1" >&2
            echo "Usage: $0 [--dry-run] [--verbose]" >&2
            exit 1
            ;;
    esac
done

# Logging functions
log_verbose() {
    if [[ "$VERBOSE" == "true" ]]; then
        echo "VERBOSE: $1" >&2
    fi
}

log_info() {
    echo "INFO: $1"
}

log_error() {
    echo "ERROR: $1" >&2
}

# Check if we're in a git repository
if ! git rev-parse --git-dir >/dev/null 2>&1; then
    log_error "Not in a git repository"
    exit 1
fi

# Check if themes directory exists
if [[ ! -d "$THEMES_DIR" ]]; then
    log_info "No themes directory found at $THEMES_DIR"
    exit 0
fi

# Function to check if any platform themes exist (simplified check)
has_platform_themes() {
    # Look for any theme that has package.json with Sitchco setup
    # and is tracked by git
    for theme_dir in "$THEMES_DIR"/*; do
        if [[ -d "$theme_dir" ]]; then
            # Check if theme is tracked by git
            if git ls-files "$theme_dir" >/dev/null 2>&1; then
                log_verbose "Found git-tracked theme: $theme_dir"
                # Check for basic platform indicators
                if [[ -f "$theme_dir/package.json" ]]; then
                    # Check if it uses sitchco-parent-theme
                    if [[ -f "$theme_dir/style.css" ]] && grep -i "^Template:\s*sitchco-parent-theme" "$theme_dir/style.css" >/dev/null 2>&1; then
                        # Verify it has Sitchco CLI setup
                        if grep -q '"@sitchco/cli"' "$theme_dir/package.json" 2>/dev/null || grep -q '"sitchco"' "$theme_dir/package.json" 2>/dev/null; then
                            log_verbose "Found platform theme: $(basename "$theme_dir")"
                            return 0
                        fi
                    fi
                fi
            fi
        fi
    done
    return 1
}

# Function to install a hook
install_hook() {
    local hook_name="$1"
    local hook_content="$2"
    local hook_path="$HOOKS_DIR/$hook_name"

    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "[DRY RUN] Would install hook: $hook_path"
        return 0
    fi

    log_info "Installing hook: $hook_path"
    echo "$hook_content" > "$hook_path"
    chmod +x "$hook_path"
}

# Function to check if hook exists and is different
hook_needs_update() {
    local hook_name="$1"
    local hook_content="$2"
    local hook_path="$HOOKS_DIR/$hook_name"

    if [[ ! -f "$hook_path" ]]; then
        return 0  # Hook doesn't exist, needs to be created
    fi

    # Compare content
    if ! echo "$hook_content" | cmp -s "$hook_path" -; then
        return 0  # Hook exists but content is different
    fi

    return 1  # Hook exists and is identical
}

# Main logic
log_info "Setting up universal git hooks for platform themes..."

# Check if any platform themes exist
if ! has_platform_themes; then
    log_info "No platform themes found with Sitchco setup - no hooks will be installed"
    exit 0
fi

log_info "Found platform themes with Sitchco setup"

# Create hooks directory if it doesn't exist
if [[ ! -d "$HOOKS_DIR" ]]; then
    log_info "Creating hooks directory: $HOOKS_DIR"
    if [[ "$DRY_RUN" != "true" ]]; then
        mkdir -p "$HOOKS_DIR"
    fi
fi

# Simple pre-commit hook template that calls DDEV command
PRE_COMMIT_HOOK_TEMPLATE="#!/bin/bash

# Pre-commit hook for platform themes - calls DDEV host command
set -euo pipefail

# Call the DDEV pre-commit host command
bash .ddev/commands/host/pre-commit \"\$@\""

# Check if pre-commit hook needs to be installed/updated
if hook_needs_update "pre-commit" "$PRE_COMMIT_HOOK_TEMPLATE"; then
    install_hook "pre-commit" "$PRE_COMMIT_HOOK_TEMPLATE"
else
    log_info "Pre-commit hook is already up to date"
fi

log_info "Universal git hooks setup completed successfully"
log_info "Hooks will run on all platform themes found during pre-commit"